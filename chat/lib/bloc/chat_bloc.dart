import 'package:flutter_bloc/flutter_bloc.dart';
import '../models/message.dart';
import '../models/attachment.dart';
import '../repositories/file_repository.dart';
import 'chat_event.dart';
import 'chat_state.dart';

class ChatBloc extends Bloc<ChatEvent, ChatState> {
  final FileRepository _fileRepository;

  ChatBloc({required FileRepository fileRepository})
      : _fileRepository = fileRepository,
        super(const ChatInitial()) {
    
    on<SendMessage>(_onSendMessage);
    on<OpenCamera>(_onOpenCamera);
    on<OpenGallery>(_onOpenGallery);
    on<OpenFilePicker>(_onOpenFilePicker);
    on<ToggleAttachmentMenu>(_onToggleAttachmentMenu);
    on<AddAttachment>(_onAddAttachment);
    on<AddPendingAttachment>(_onAddPendingAttachment);
    on<RemovePendingAttachment>(_onRemovePendingAttachment);
    on<ClearPendingAttachments>(_onClearPendingAttachments);
    on<ViewAttachment>(_onViewAttachment);
    on<DownloadFile>(_onDownloadFile);
    on<ClearError>(_onClearError);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–∞—Ç
    final now = DateTime.now();
    final testMessages = [
      Message(
        id: '1',
        text: '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?',
        isMe: false,
        timestamp: now.subtract(Duration(days: 2, hours: 10)),
      ),
      Message(
        id: '2',
        text: '–ü—Ä–∏–≤–µ—Ç! –û—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ!',
        isMe: true,
        timestamp: now.subtract(Duration(days: 2, hours: 9, minutes: 45)),
      ),
      Message(
        id: '3',
        text: '–ß—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ?',
        isMe: false,
        timestamp: now.subtract(Duration(days: 1, hours: 14)),
      ),
      Message(
        id: '4',
        text: '–î—É–º–∞—é —Å—ä–µ–∑–¥–∏—Ç—å –Ω–∞ –¥–∞—á—É üå≤',
        isMe: true,
        timestamp: now.subtract(Duration(days: 1, hours: 13, minutes: 30)),
      ),
      Message(
        id: '5',
        text: '–û—Ç–ª–∏—á–Ω–∞—è –∏–¥–µ—è!',
        isMe: false,
        timestamp: now.subtract(Duration(hours: 2)),
      ),
    ];
    
    emit(ChatLoaded(messages: testMessages));
  }

  void _onSendMessage(SendMessage event, Emitter<ChatState> emit) {
    final currentState = state;
    if (currentState is ChatLoaded) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≤–ª–æ–∂–µ–Ω–∏—è
        if (event.text.trim().isEmpty && currentState.pendingAttachments.isEmpty) return;

        List<Message> newMessages = [];

        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç, —Å–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (event.text.trim().isNotEmpty) {
          final textMessage = Message(
            id: DateTime.now().millisecondsSinceEpoch.toString(),
            text: event.text.trim(),
            isMe: true,
            timestamp: DateTime.now(),
          );
          newMessages.add(textMessage);
        }

        // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–ª–æ–∂–µ–Ω–∏—è
        for (int i = 0; i < currentState.pendingAttachments.length; i++) {
          final attachment = currentState.pendingAttachments[i];
          final attachmentMessage = Message(
            id: '${DateTime.now().millisecondsSinceEpoch}_${attachment.id}_$i',
            text: '', // –ë–µ–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤–ª–æ–∂–µ–Ω–∏–π
            isMe: true,
            timestamp: DateTime.now().add(Duration(milliseconds: i)), // –ß—É—Ç—å —Ä–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è
            attachmentType: attachment.type,
            attachmentPath: attachment.path,
          );
          newMessages.add(attachmentMessage);
        }

        final updatedMessages = List<Message>.from(currentState.messages)
          ..addAll(newMessages);

        // –û—á–∏—â–∞–µ–º pending attachments –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        emit(currentState.copyWith(
          messages: updatedMessages,
          pendingAttachments: [],
          errorMessage: null, // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏
        ));

        // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if (event.text.trim().isNotEmpty) {
          _simulateResponse(emit);
        }
      } catch (e) {
        emit(currentState.copyWith(
          errorMessage: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: $e',
        ));
      }
    }
  }

  void _onToggleAttachmentMenu(ToggleAttachmentMenu event, Emitter<ChatState> emit) {
    final currentState = state;
    if (currentState is ChatLoaded) {
      emit(currentState.copyWith(
        isAttachmentMenuVisible: !currentState.isAttachmentMenuVisible,
      ));
    }
  }

  Future<void> _onOpenCamera(OpenCamera event, Emitter<ChatState> emit) async {
    final currentState = state;
    if (currentState is ChatLoaded) {
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é
      emit(currentState.copyWith(isAttachmentMenuVisible: false));

      try {
        final image = await _fileRepository.pickImageFromCamera();
        if (image != null) {
          add(AddPendingAttachment(
            type: 'image',
            path: image.path,
          ));
        }
      } catch (e) {
        emit(currentState.copyWith(
          errorMessage: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–∞–º–µ—Ä—ã: ${e.toString()}',
        ));
      }
    }
  }

  Future<void> _onOpenGallery(OpenGallery event, Emitter<ChatState> emit) async {
    final currentState = state;
    if (currentState is ChatLoaded) {
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é
      emit(currentState.copyWith(isAttachmentMenuVisible: false));

      try {
        final image = await _fileRepository.pickImageFromGallery();
        if (image != null) {
          add(AddPendingAttachment(
            type: 'image',
            path: image.path,
          ));
        }
      } catch (e) {
        emit(currentState.copyWith(
          errorMessage: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –≥–∞–ª–µ—Ä–µ–∏: ${e.toString()}',
        ));
      }
    }
  }

  Future<void> _onOpenFilePicker(OpenFilePicker event, Emitter<ChatState> emit) async {
    final currentState = state;
    if (currentState is ChatLoaded) {
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é
      emit(currentState.copyWith(isAttachmentMenuVisible: false));

      try {
        final file = await _fileRepository.pickFile();
        if (file != null) {
          add(AddPendingAttachment(
            type: 'file',
            path: file.path!,
            name: file.name,
          ));
        }
      } catch (e) {
        emit(currentState.copyWith(
          errorMessage: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–∞–π–ª–∞: ${e.toString()}',
        ));
      }
    }
  }

  void _onAddAttachment(AddAttachment event, Emitter<ChatState> emit) {
    final currentState = state;
    if (currentState is ChatLoaded) {
      final newMessage = Message(
        id: DateTime.now().millisecondsSinceEpoch.toString(),
        text: event.text,
        isMe: true,
        timestamp: DateTime.now(),
        attachmentType: event.attachmentType,
        attachmentPath: event.attachmentPath,
      );

      final updatedMessages = List<Message>.from(currentState.messages)
        ..add(newMessage);

      emit(currentState.copyWith(messages: updatedMessages));
    }
  }

  void _onAddPendingAttachment(AddPendingAttachment event, Emitter<ChatState> emit) {
    final currentState = state;
    if (currentState is ChatLoaded) {
      final newAttachment = Attachment(
        id: DateTime.now().millisecondsSinceEpoch.toString(),
        type: event.type,
        path: event.path,
        name: event.name,
      );

      final updatedAttachments = List<Attachment>.from(currentState.pendingAttachments)
        ..add(newAttachment);

      emit(currentState.copyWith(pendingAttachments: updatedAttachments));
    }
  }

  void _onRemovePendingAttachment(RemovePendingAttachment event, Emitter<ChatState> emit) {
    final currentState = state;
    if (currentState is ChatLoaded) {
      final updatedAttachments = currentState.pendingAttachments
          .where((attachment) => attachment.id != event.attachmentId)
          .toList();

      emit(currentState.copyWith(pendingAttachments: updatedAttachments));
    }
  }

  void _onClearPendingAttachments(ClearPendingAttachments event, Emitter<ChatState> emit) {
    final currentState = state;
    if (currentState is ChatLoaded) {
      emit(currentState.copyWith(pendingAttachments: []));
    }
  }

  void _onViewAttachment(ViewAttachment event, Emitter<ChatState> emit) {
    // –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    // –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–ª–æ–∂–µ–Ω–∏–π –±—É–¥–µ—Ç –≤ UI
  }

  void _onDownloadFile(DownloadFile event, Emitter<ChatState> emit) async {
    final currentState = state;
    if (currentState is ChatLoaded) {
      try {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ SnackBar –≤ UI
      } catch (e) {
        emit(currentState.copyWith(
          errorMessage: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞',
        ));
      }
    }
  }

  void _onClearError(ClearError event, Emitter<ChatState> emit) {
    final currentState = state;
    if (currentState is ChatLoaded) {
      emit(currentState.copyWith(errorMessage: null));
    }
  }

  void _simulateResponse(Emitter<ChatState> emit) {
    Future.delayed(const Duration(seconds: 1), () {
      if (!isClosed) {
        final currentState = state;
        if (currentState is ChatLoaded) {
          final responseMessage = Message(
            id: DateTime.now().millisecondsSinceEpoch.toString(),
            text: '–ü–æ–Ω—è–ª, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...',
            isMe: false,
            timestamp: DateTime.now(),
          );

          final updatedMessages = List<Message>.from(currentState.messages)
            ..add(responseMessage);

          emit(currentState.copyWith(messages: updatedMessages));
        }
      }
    });
  }
}
